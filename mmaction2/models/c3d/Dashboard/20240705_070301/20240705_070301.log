2024/07/05 07:03:02 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 391759183
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr
    NVCC: Cuda compilation tools, release 11.5, V11.5.119
    GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 1.11.0+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0+cu113
    OpenCV: 4.10.0
    MMEngine: 0.8.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 391759183
    diff_rank_seed: False
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/07/05 07:03:02 - mmengine - INFO - Config:
ann_file_test = 'data/video/Dashboard_val.txt'
ann_file_train = 'data/video/Dashboard_train.txt'
ann_file_val = 'data/video/Dashboard_val.txt'
auto_scale_lr = dict(base_batch_size=240, enable=False)
data_root = 'data'
data_root_val = 'data'
dataset_type = 'VideoDataset'
default_hooks = dict(
    checkpoint=dict(
        interval=1, max_keep_ckpts=1, save_best='auto', type='CheckpointHook'),
    logger=dict(ignore_last=False, interval=20, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    runtime_info=dict(type='RuntimeInfoHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'),
    timer=dict(type='IterTimerHook'))
default_scope = 'mmaction'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
file_client_args = dict(io_backend='disk')
launcher = 'none'
load_from = 'https://download.openmmlab.com/mmaction/v1.0/recognition/c3d/c3d_sports1m-pretrained_8xb30-16x1x1-45e_ucf101-rgb/c3d_sports1m-pretrained_8xb30-16x1x1-45e_ucf101-rgb_20220811-31723200.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=20)
model = dict(
    backbone=dict(
        act_cfg=dict(type='ReLU'),
        conv_cfg=dict(type='Conv3d'),
        dropout_ratio=0.5,
        init_std=0.005,
        norm_cfg=None,
        pretrained=
        'https://download.openmmlab.com/mmaction/recognition/c3d/c3d_sports1m_pretrain_20201016-dcc47ddc.pth',
        style='pytorch',
        type='C3D'),
    cls_head=dict(
        average_clips='prob',
        dropout_ratio=0.5,
        in_channels=4096,
        init_std=0.01,
        num_classes=16,
        spatial_type=None,
        type='I3DHead'),
    data_preprocessor=dict(
        format_shape='NCTHW',
        mean=[
            104,
            117,
            128,
        ],
        std=[
            1,
            1,
            1,
        ],
        type='ActionDataPreprocessor'),
    test_cfg=None,
    train_cfg=None,
    type='Recognizer3D')
optim_wrapper = dict(
    clip_grad=dict(max_norm=40, norm_type=2),
    optimizer=dict(lr=0.001, momentum=0.9, type='SGD', weight_decay=0.0005))
param_scheduler = [
    dict(
        begin=0,
        by_epoch=True,
        end=30,
        gamma=0.1,
        milestones=[
            4,
            8,
        ],
        type='MultiStepLR'),
]
randomness = dict(deterministic=False, diff_rank_seed=False, seed=None)
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='data/video/Dashboard_val.txt',
        data_prefix=dict(video='data'),
        pipeline=[
            dict(io_backend='disk', type='DecordInit'),
            dict(
                clip_len=16,
                frame_interval=1,
                num_clips=10,
                test_mode=True,
                type='SampleFrames'),
            dict(type='DecordDecode'),
            dict(scale=(
                -1,
                128,
            ), type='Resize'),
            dict(crop_size=112, type='CenterCrop'),
            dict(input_format='NCTHW', type='FormatShape'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='VideoDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(type='AccMetric')
test_pipeline = [
    dict(io_backend='disk', type='DecordInit'),
    dict(
        clip_len=16,
        frame_interval=1,
        num_clips=10,
        test_mode=True,
        type='SampleFrames'),
    dict(type='DecordDecode'),
    dict(scale=(
        -1,
        128,
    ), type='Resize'),
    dict(crop_size=112, type='CenterCrop'),
    dict(input_format='NCTHW', type='FormatShape'),
    dict(type='PackActionInputs'),
]
train_cfg = dict(max_epochs=30, type='EpochBasedTrainLoop', val_interval=1)
train_dataloader = dict(
    batch_size=12,
    dataset=dict(
        ann_file='data/video/Dashboard_train.txt',
        data_prefix=dict(video='data'),
        pipeline=[
            dict(io_backend='disk', type='DecordInit'),
            dict(
                clip_len=16,
                frame_interval=1,
                num_clips=1,
                type='SampleFrames'),
            dict(type='DecordDecode'),
            dict(scale=(
                -1,
                128,
            ), type='Resize'),
            dict(size=112, type='RandomCrop'),
            dict(flip_ratio=0.5, type='Flip'),
            dict(input_format='NCTHW', type='FormatShape'),
            dict(type='PackActionInputs'),
        ],
        type='VideoDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(io_backend='disk', type='DecordInit'),
    dict(clip_len=16, frame_interval=1, num_clips=1, type='SampleFrames'),
    dict(type='DecordDecode'),
    dict(scale=(
        -1,
        128,
    ), type='Resize'),
    dict(size=112, type='RandomCrop'),
    dict(flip_ratio=0.5, type='Flip'),
    dict(input_format='NCTHW', type='FormatShape'),
    dict(type='PackActionInputs'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=30,
    dataset=dict(
        ann_file='data/video/Dashboard_val.txt',
        data_prefix=dict(video='data'),
        pipeline=[
            dict(io_backend='disk', type='DecordInit'),
            dict(
                clip_len=16,
                frame_interval=1,
                num_clips=1,
                test_mode=True,
                type='SampleFrames'),
            dict(type='DecordDecode'),
            dict(scale=(
                -1,
                128,
            ), type='Resize'),
            dict(crop_size=112, type='CenterCrop'),
            dict(input_format='NCTHW', type='FormatShape'),
            dict(type='PackActionInputs'),
        ],
        test_mode=True,
        type='VideoDataset'),
    num_workers=8,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(type='AccMetric')
val_pipeline = [
    dict(io_backend='disk', type='DecordInit'),
    dict(
        clip_len=16,
        frame_interval=1,
        num_clips=1,
        test_mode=True,
        type='SampleFrames'),
    dict(type='DecordDecode'),
    dict(scale=(
        -1,
        128,
    ), type='Resize'),
    dict(crop_size=112, type='CenterCrop'),
    dict(input_format='NCTHW', type='FormatShape'),
    dict(type='PackActionInputs'),
]
view = 'Dashboard'
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='ActionVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = 'models/c3d/Dashboard'

2024/07/05 07:03:05 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/07/05 07:03:05 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/07/05 07:03:05 - mmengine - INFO - load model from: https://download.openmmlab.com/mmaction/recognition/c3d/c3d_sports1m_pretrain_20201016-dcc47ddc.pth
2024/07/05 07:03:05 - mmengine - INFO - Loads checkpoint by http backend from path: https://download.openmmlab.com/mmaction/recognition/c3d/c3d_sports1m_pretrain_20201016-dcc47ddc.pth
Name of parameter - Initialization information

backbone.conv1a.conv.weight - torch.Size([64, 3, 3, 3, 3]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv1a.conv.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv2a.conv.weight - torch.Size([128, 64, 3, 3, 3]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv2a.conv.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv3a.conv.weight - torch.Size([256, 128, 3, 3, 3]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv3a.conv.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv3b.conv.weight - torch.Size([256, 256, 3, 3, 3]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv3b.conv.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv4a.conv.weight - torch.Size([512, 256, 3, 3, 3]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv4a.conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv4b.conv.weight - torch.Size([512, 512, 3, 3, 3]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv4b.conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv5a.conv.weight - torch.Size([512, 512, 3, 3, 3]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv5a.conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv5b.conv.weight - torch.Size([512, 512, 3, 3, 3]): 
Initialized by user-defined `init_weights` in C3D  

backbone.conv5b.conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in C3D  

backbone.fc6.weight - torch.Size([4096, 8192]): 
Initialized by user-defined `init_weights` in C3D  

backbone.fc6.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in C3D  

backbone.fc7.weight - torch.Size([4096, 4096]): 
Initialized by user-defined `init_weights` in C3D  

backbone.fc7.bias - torch.Size([4096]): 
Initialized by user-defined `init_weights` in C3D  

cls_head.fc_cls.weight - torch.Size([16, 4096]): 
Initialized by user-defined `init_weights` in I3DHead  

cls_head.fc_cls.bias - torch.Size([16]): 
Initialized by user-defined `init_weights` in I3DHead  
2024/07/05 07:04:10 - mmengine - INFO - Load checkpoint from https://download.openmmlab.com/mmaction/v1.0/recognition/c3d/c3d_sports1m-pretrained_8xb30-16x1x1-45e_ucf101-rgb/c3d_sports1m-pretrained_8xb30-16x1x1-45e_ucf101-rgb_20220811-31723200.pth
2024/07/05 07:04:10 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/07/05 07:04:10 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/07/05 07:04:10 - mmengine - INFO - Checkpoints will be saved to /hdd/mmaction2/models/c3d/Dashboard.
2024/07/05 07:04:14 - mmengine - INFO - Epoch(train)  [1][ 20/698]  lr: 1.0000e-03  eta: 1:04:02  time: 0.1837  data_time: 0.0405  memory: 3131  grad_norm: 53.6641  loss: 2.1436  top1_acc: 0.6667  top5_acc: 0.7500  loss_cls: 2.1436
2024/07/05 07:04:16 - mmengine - INFO - Epoch(train)  [1][ 40/698]  lr: 1.0000e-03  eta: 0:56:20  time: 0.1398  data_time: 0.0035  memory: 3131  grad_norm: 23.8551  loss: 1.9814  top1_acc: 0.5833  top5_acc: 0.7500  loss_cls: 1.9814
2024/07/05 07:04:19 - mmengine - INFO - Epoch(train)  [1][ 60/698]  lr: 1.0000e-03  eta: 0:53:45  time: 0.1400  data_time: 0.0032  memory: 3131  grad_norm: 15.3642  loss: 1.8384  top1_acc: 0.5833  top5_acc: 0.6667  loss_cls: 1.8384
2024/07/05 07:04:22 - mmengine - INFO - Epoch(train)  [1][ 80/698]  lr: 1.0000e-03  eta: 0:52:27  time: 0.1400  data_time: 0.0031  memory: 3131  grad_norm: 13.0964  loss: 1.8218  top1_acc: 0.4167  top5_acc: 0.5833  loss_cls: 1.8218
2024/07/05 07:04:25 - mmengine - INFO - Epoch(train)  [1][100/698]  lr: 1.0000e-03  eta: 0:51:38  time: 0.1399  data_time: 0.0032  memory: 3131  grad_norm: 10.8976  loss: 1.8181  top1_acc: 0.5000  top5_acc: 0.8333  loss_cls: 1.8181
